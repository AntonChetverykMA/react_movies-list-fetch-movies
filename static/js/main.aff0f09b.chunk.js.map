{"version":3,"sources":["components/MovieCard/MovieCard.js","components/MoviesList/MoviesList.js","components/FindMovie/FindMovie.js","api/api.js","App.js","index.js"],"names":["MovieCard","title","description","imgUrl","imdbUrl","className","src","alt","href","MoviesList","movies","map","movie","key","imdbId","FindMovie","props","useState","query","setQuery","error","setError","setMovie","loading","setLoading","onSubmit","e","url","options","preventDefault","fetch","then","res","ok","Error","status","json","htmlFor","type","id","placeholder","classNames","value","onChange","target","disabled","onClick","some","item","imdbID","addMovie","Title","Plot","Poster","defaultProps","App","data","setMovies","current","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.aff0f09b.chunk.js","sourcesContent":["import React from 'react';\nimport './MovieCard.scss';\nimport PropTypes from 'prop-types';\n\nexport const MovieCard = ({ title, description = '', imgUrl, imdbUrl }) => (\n  <div className=\"card\">\n    <div className=\"card-image\">\n      <figure className=\"image is-4by3\">\n        <img src={imgUrl} alt=\"Film logo\" />\n      </figure>\n    </div>\n    <div className=\"card-content\">\n      <div className=\"media\">\n        <div className=\"media-left\">\n          <figure className=\"image is-48x48\">\n            <img src=\"images/imdb-logo.jpeg\" alt=\"imdb\" />\n          </figure>\n        </div>\n        <div className=\"media-content\">\n          <p className=\"title is-8\">{title}</p>\n        </div>\n      </div>\n\n      <div className=\"content\">\n        {description}\n        <br />\n        <a href={imdbUrl}>IMDB</a>\n      </div>\n    </div>\n  </div>\n);\n\nMovieCard.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n  imgUrl: PropTypes.string.isRequired,\n  imdbUrl: PropTypes.string.isRequired,\n};\n","import React from 'react';\r\n\r\nimport './MoviesList.scss';\r\nimport PropTypes from 'prop-types';\r\nimport { MovieCard } from '../MovieCard';\r\n\r\nexport const MoviesList = ({\r\n  movies = [],\r\n}) => (\r\n  <div className=\"movies\">\r\n    {movies.map(movie => (\r\n      <MovieCard key={movie.imdbId} {...movie} />\r\n    ))}\r\n  </div>\r\n);\r\n\r\nMoviesList.propTypes = {\r\n  movies: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      imdbId: PropTypes.string.isRequired,\r\n    }).isRequired,\r\n  ).isRequired,\r\n};\r\n","/* eslint-disable operator-linebreak */\n/* eslint-disable arrow-body-style */\n/* eslint-disable no-console */\n/* eslint-disable arrow-parens */\nimport React, { useState } from 'react';\nimport './FindMovie.scss';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport { MovieCard } from '../MovieCard';\nimport { request } from '../../api/api';\n\nexport const FindMovie = (props) => {\n  const [query, setQuery] = useState('');\n  const [error, setError] = useState(false);\n  const [movie, setMovie] = useState(null);\n  const [loading, setLoading] = useState(false);\n\n  const findMovie = (e) => {\n    e.preventDefault();\n    if (query) {\n      setLoading(true);\n      request(query).then((res) => {\n        if (res.Error) {\n          setError(true);\n          setMovie(null);\n          setLoading(false);\n        } else {\n          setError(false);\n          setMovie(res);\n          setLoading(false);\n          setQuery('');\n        }\n      });\n    }\n  };\n\n  const addToList = () => {\n    if (movie) {\n      const isAdded = props.movies.some((item) => item.imdbId === movie.imdbID);\n\n      if (isAdded) {\n        return;\n      }\n\n      props.addMovie({\n        title: movie.Title,\n        description: movie.Plot,\n        imgUrl: movie.Poster,\n        imdbUrl: `https://www.imdb.com/title/${movie.imdbID}`,\n        imdbId: movie.imdbID,\n      });\n      setQuery('');\n    }\n  };\n\n  return (\n    <>\n      <form className=\"find-movie\" onSubmit={findMovie}>\n        <div className=\"field\">\n          <label className=\"label\" htmlFor=\"movie-title\">\n            Movie title\n          </label>\n\n          <div className=\"control\">\n            <input\n              type=\"text\"\n              id=\"movie-title\"\n              placeholder=\"Enter a title to search\"\n              className={classNames('input', { 'is-danger': error })}\n              value={query}\n              onChange={(e) => {\n                setError(false);\n                setQuery(e.target.value);\n              }}\n            />\n          </div>\n\n          {error && (\n            <p className=\"help is-danger\">\n              Can&apos;t find a movie with such a title\n            </p>\n          )}\n        </div>\n\n        <div className=\"field is-grouped\">\n          <div className=\"control\">\n            <button\n              type=\"submit\"\n              className=\"button is-light\"\n              disabled={loading}\n            >\n              Find a movie\n            </button>\n          </div>\n\n          <div className=\"control\">\n            <button\n              type=\"button\"\n              className=\"button is-primary\"\n              onClick={addToList}\n              disabled={loading}\n            >\n              Add to the list\n            </button>\n          </div>\n        </div>\n      </form>\n\n      <div className=\"container\">\n        <h2 className=\"title\">Preview</h2>\n        {movie &&\n          (!loading ? (\n            <MovieCard\n              title={movie.Title}\n              description={movie.Plot}\n              imgUrl={movie.Poster}\n              imdbUrl={`https://www.imdb.com/title/${movie.imdbID}`}\n            />\n          ) : (\n            '...Loading'\n          ))}\n      </div>\n    </>\n  );\n};\n\nFindMovie.propTypes = {\n  addMovie: PropTypes.func.isRequired,\n  movies: PropTypes.arrayOf(PropTypes.shape({ imdbId: PropTypes.string })),\n};\n\nFindMovie.defaultProps = {\n  movies: [],\n};\n","/* eslint-disable arrow-body-style */\nconst BASE_URL = 'https://www.omdbapi.com/?i=tt3896198&apikey=74104b40';\n\nexport const request = (url, options) => {\n  return fetch(`${BASE_URL}&t=${url}`, options).then((res) => {\n    if (!res.ok) {\n      throw new Error(`${res.status}`);\n    }\n\n    return res.json();\n  });\n};\n","/* eslint-disable arrow-parens */\nimport React, { useState } from 'react';\nimport './App.scss';\nimport { MoviesList } from './components/MoviesList';\nimport { FindMovie } from './components/FindMovie';\nimport data from './api/movies.json';\n\nexport function App() {\n  const [movies, setMovies] = useState(data);\n\n  const addMovie = (movie) => {\n    setMovies((current) => [...current, movie]);\n  };\n\n  return (\n    <div className=\"page\">\n      <div className=\"page-content\">\n        <MoviesList movies={movies} />\n      </div>\n      <div className=\"sidebar\">\n        <FindMovie addMovie={addMovie} movies={movies} />\n      </div>\n    </div>\n  );\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bulma/css/bulma.css';\r\nimport { App } from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n"],"sourceRoot":""}